import streamlit as st
from service.frontend.api.client import get_models, activate_model


def show_model_management() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏."""
    st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")

    models = get_models()
    if not models:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        st.info("–û–±—É—á–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π' –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏'")
        return

    active_model = next((m for m in models if m["is_active"]), None)
    if active_model:
        model_type_emoji = "ü§ñ" if active_model.get("is_pretrained", False) else "üß†"
        st.success(f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {model_type_emoji} {active_model['id']}")

    pretrained_models = [m for m in models if m.get("is_pretrained", False)]
    trained_models = [m for m in models if not m.get("is_pretrained", False)]

    if pretrained_models:
        st.subheader("ü§ñ –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        for model in pretrained_models:
            title = f"ü§ñ {model['model_type']} ({model['id']})"
            if model["is_active"]:
                title += " ‚úÖ"
            
            with st.expander(title):
                cols = st.columns([1, 3])
                with cols[0]:
                    if st.button(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {model['id']}", key=f"pretrained_{model['id']}"):
                        if activate_model(model["id"]):
                            st.rerun()
                    st.metric("R¬≤", model["metrics"]["r2_score"] or "N/A")
                    st.metric("MSE", model["metrics"]["mse"] or "N/A")
                    st.write("**–¢–∏–ø:** –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è")
                with cols[1]:
                    st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                    st.json(model["hyperparameters"])
                    st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                    st.json(model["metrics"])

    if trained_models:
        st.subheader("üß† –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        for model in trained_models:
            title = f"üß† {model['model_type']} ({model['id']})"
            if model["is_active"]:
                title += " ‚úÖ"
            
            with st.expander(title):
                cols = st.columns([1, 3])
                with cols[0]:
                    if st.button(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {model['id']}", key=f"trained_{model['id']}"):
                        if activate_model(model["id"]):
                            st.rerun()
                    st.metric("R¬≤", model["metrics"]["r2_score"] or "N/A")
                    st.metric("MSE", model["metrics"]["mse"] or "N/A")
                    st.write("**–¢–∏–ø:** –û–±—É—á–µ–Ω–Ω–∞—è")
                with cols[1]:
                    st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                    st.json(model["hyperparameters"])
                    st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                    st.json(model["metrics"])
