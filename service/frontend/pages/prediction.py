import streamlit as st
import pandas as pd
import requests
from service.frontend.api.client import predict_single, predict_multiple


def show_prediction() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è."""
    st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")
    prediction_type = st.radio("–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞", ["–ï–¥–∏–Ω–∏—á–Ω—ã–π", "–ü–∞–∫–µ—Ç–Ω—ã–π"])

    if prediction_type == "–ï–¥–∏–Ω–∏—á–Ω—ã–π":
        with st.form("single_prediction"):
            col1, col2 = st.columns(2)
            data = {}
            with col1:
                st.subheader("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                data["title"] = st.text_input("–ú–∞—Ä–∫–∞")
                data["year"] = st.number_input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 1900, 2023)
                data["mileage"] = st.number_input("–ü—Ä–æ–±–µ–≥ (–∫–º)", 0)
                data["engine_capacity"] = st.number_input(
                    "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)", 0.0, step=0.1
                )
                data["engine_power"] = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)", 0)

            with col2:
                st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                data["transmission"] = st.selectbox(
                    "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", ["–º–µ—Ö–∞–Ω–∏–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç", "—Ä–æ–±–æ—Ç", "–≤–∞—Ä–∏–∞—Ç–æ—Ä"]
                )
                data["body_type"] = st.selectbox(
                    "–¢–∏–ø –∫—É–∑–æ–≤–∞",
                    [
                        "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 5 –¥–≤.",
                        "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 5 –¥–≤.",
                        "—Å–µ–¥–∞–Ω",
                        "–º–∏–Ω–∏–≤—ç–Ω",
                        "—Ö—ç—Ç—á–±–µ–∫ 5 –¥–≤.",
                        "–∫—É–ø–µ",
                        "–∫–∞–±—Ä–∏–æ–ª–µ—Ç",
                        "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 3 –¥–≤.",
                        "—Ö—ç—Ç—á–±–µ–∫ 3 –¥–≤.",
                        "–ø–∏–∫–∞–ø –¥–≤–æ–π–Ω–∞—è –∫–∞–±–∏–Ω–∞",
                        "—Å–µ–¥–∞–Ω-—Ö–∞—Ä–¥—Ç–æ–ø",
                        "—Ç–∞—Ä–≥–∞",
                        "–∫–æ–º–ø–∞–∫—Ç–≤—ç–Ω",
                        "–ª–∏—Ñ—Ç–±–µ–∫",
                        "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π",
                        "—Ä–æ–¥—Å—Ç–µ—Ä",
                        "–∫—É–ø–µ-—Ö–∞—Ä–¥—Ç–æ–ø",
                        "—Ñ—É—Ä–≥–æ–Ω",
                        "–ø–∏–∫–∞–ø –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞",
                        "–º–∏–∫—Ä–æ–≤—ç–Ω",
                        "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 3 –¥–≤.",
                        "—Å–µ–¥–∞–Ω 2 –¥–≤.",
                        "–ø–∏–∫–∞–ø –ø–æ–ª—É—Ç–æ—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞",
                        "—Å–ø–∏–¥—Å—Ç–µ—Ä",
                        "–ª–∏–º—É–∑–∏–Ω",
                        "—Ö—ç—Ç—á–±–µ–∫ 4 –¥–≤.",
                        "—É–Ω–∏–≤–µ—Ä—Å–∞–ª",
                        "—Ñ–∞—Å—Ç–±–µ–∫",
                    ],
                )
                data["drive_type"] = st.selectbox(
                    "–ü—Ä–∏–≤–æ–¥", ["–ø–µ—Ä–µ–¥–Ω–∏–π", "–ø–æ–ª–Ω—ã–π", "–∑–∞–¥–Ω–∏–π"]
                )
                data["color"] = st.text_input("–¶–≤–µ—Ç")
                data["fuel_type"] = st.selectbox(
                    "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ"]
                )
                data["travel_distance"] = 0
                if data["fuel_type"] == "–≠–ª–µ–∫—Ç—Ä–æ":
                    data["travel_distance"] = st.number_input("–î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ (–∫–º)", 0)

            if st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å"):
                if data["fuel_type"] == "–≠–ª–µ–∫—Ç—Ä–æ" and data["travel_distance"] <= 0:
                    st.error("–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —É–∫–∞–∂–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞")
                else:
                    try:
                        prediction = predict_single(data)["prediction"]
                        st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction:,.2f} —Ä—É–±.")
                    except requests.exceptions.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
                        if hasattr(e, "response") and e.response.status_code == 422:
                            st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        uploaded_file = st.file_uploader("CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type="csv")
        if uploaded_file:
            try:
                predictions = predict_multiple(uploaded_file.getvalue())["predictions"]
                df = pd.read_csv(uploaded_file)
                df["–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã"] = predictions

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                st.dataframe(df.style.format({"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": "{:,.2f}"}))

                csv = df.to_csv(index=False).encode()
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", csv, "predictions.csv", "text/csv"
                )
            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
