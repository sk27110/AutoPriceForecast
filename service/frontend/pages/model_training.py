import streamlit as st
import requests
from api.client import train_model


def show_model_training() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    st.title("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    model_type = st.selectbox(
        "–¢–∏–ø –º–æ–¥–µ–ª–∏",
        ["LinearRegression", "Ridge", "Lasso"]
    )
    
    with st.form("model_params"):
        model_name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
            help="–£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏",
            max_chars=30
        )
        
        params = {}
        if model_type == "LinearRegression":
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['n_jobs'] = st.number_input("n_jobs", value=-1)
            params['copy_X'] = st.checkbox("copy_X", True)
            
        elif model_type == "Ridge":
            params['alpha'] = st.number_input("alpha", value=1.0)
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['solver'] = st.selectbox(
                "solver",
                ["auto", "svd", "cholesky", "lsqr", "sag"]
            )
            params['tol'] = st.number_input("tol", value=0.0001)
            params['max_iter'] = st.number_input("max_iter", value=500)
    
        elif model_type == "Lasso":
            params['alpha'] = st.number_input("alpha", value=1.0)
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['selection'] = st.selectbox("selection", ["cyclic", "random"])
            params['tol'] = st.number_input("tol", value=0.0001)
            params['max_iter'] = st.number_input("max_iter", value=500)
        
        if st.form_submit_button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"):
            if not model_name.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            else:
                try:
                    result = train_model(model_type, model_name, params)
                    
                    if result["status_code"] == 200:
                        st.success(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏–µ!")
                        st.json(result["data"])
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ {result['status_code']}: {result['error']}")
                        
                except requests.exceptions.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                except KeyError as e:
                    st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {str(e)}")
