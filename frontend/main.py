import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Optional

BASE_API_URL = "http://localhost:8000"

st.set_page_config(
    page_title="Car Price Prediction",
    layout="wide",
    initial_sidebar_state="expanded"
)


def load_data_from_api() -> Optional[pd.DataFrame]:
    try:
        response = requests.get(f"{BASE_API_URL}/get_dataset", timeout=10)
        if response.status_code == 200:
            return pd.DataFrame(response.json())
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None


def main():
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏",
                                                "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"])
    if page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
        st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            df = load_data_from_api()
        if df is not None:
            with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.dataframe(df.head())
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
                try:
                    fig, ax = plt.subplots(figsize=(8, 4))
                    sns.histplot(
                        df['price'],
                        bins=30,
                        kde=True,
                        ax=ax,
                        binrange=(0, 10_000_000)
                    )
                    ax.set_xlim(0, 10_000_000)
                    ax.set_xticks(range(0, 11_000_000, 1_000_000))
                    ax.set_xticklabels([f"{x//1_000_000}M" for x in ax.get_xticks()])
                    st.pyplot(fig)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω: {str(e)}")
            with col2:
                st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                try:
                    numeric_cols = ['year', 'mileage', 'engine_capacity',
                                    'engine_power', 'travel_distance', 'price']
                    fig, ax = plt.subplots(figsize=(8, 4))
                    sns.heatmap(df[numeric_cols].corr(), annot=True, ax=ax)
                    st.pyplot(fig)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            try:
                categorical_cols = ['transmission', 'body_type',
                                    'drive_type', 'color', 'fuel_type']
                categorical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫", categorical_cols)
                fig, ax = plt.subplots(figsize=(10, 4))
                df[categorical].value_counts().plot(kind='bar', ax=ax)
                st.pyplot(fig)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {str(e)}")

    elif page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏":
        st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")
        try:
            response = requests.get(f"{BASE_API_URL}/models")
            models = response.json()
            active_model = next((m for m in models if m['is_active']), None)
            if active_model:
                st.success(f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active_model['id']}")
            for model in models:
                with st.expander(f"{model['model_type']} ({model['id']})"):
                    cols = st.columns([1, 3])
                    with cols[0]:
                        if st.button(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {model['id']}"):
                            requests.post(
                                f"{BASE_API_URL}/set?model_id={model['id']}"
                            )
                            st.rerun()
                        st.metric("R¬≤", model['metrics']['r2_score'] or "N/A")
                        st.metric("MSE", model['metrics']['mse'] or "N/A")
                    with cols[1]:
                        st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                        st.json(model['hyperparameters'])
                        st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                        st.json(model['metrics'])
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}")

    elif page == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
        st.title("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        model_type = st.selectbox(
            "–¢–∏–ø –º–æ–¥–µ–ª–∏",
            ["LinearRegression", "Ridge", "Lasso"]
        )
        params = {}
        with st.form("model_params"):
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            model_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
                help="–£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏",
                max_chars=30
            )
            if model_type == "LinearRegression":
                params['fit_intercept'] = st.checkbox("fit_intercept", True)
                params['n_jobs'] = st.number_input("n_jobs", value=-1)
                params['copy_X'] = st.checkbox("copy_X", True)
            elif model_type == "Ridge":
                params['alpha'] = st.number_input("alpha", 1.0)
                params['fit_intercept'] = st.checkbox("fit_intercept", True)
                params['solver'] = st.selectbox(
                    "solver",
                    ["auto", "svd", "cholesky", "lsqr", "sag"]
                )
                params['tol'] = st.number_input("tol", 0.0001)
            elif model_type == "Lasso":
                params['alpha'] = st.number_input("alpha", 1.0)
                params['fit_intercept'] = st.checkbox("fit_intercept", True)
                params['selection'] = st.selectbox("selection", ["cyclic", "random"])
                params['tol'] = st.number_input("tol", 0.0001)
            submitted = st.form_submit_button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            if submitted:
                if not model_name.strip():
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                else:
                    endpoint = {
                        "LinearRegression": "/fit_linearregression",
                        "Ridge": "/fit_ridge",
                        "Lasso": "/fit_lasso"
                    }[model_type]
                    try:
                        response = requests.post(
                            f"{BASE_API_URL}{endpoint}",
                            json={
                                "params": params,
                                "id": {"id": model_name.strip()}
                            }
                        )
                        if response.status_code == 200:
                            st.success(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏–µ!")
                            st.session_state.training_model = model_name
                        else:
                            st.error(f"–û—à–∏–±–∫–∞: {response.json()['detail']}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")

    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
        st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")
        prediction_type = st.radio("–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞", ["–ï–¥–∏–Ω–∏—á–Ω—ã–π", "–ü–∞–∫–µ—Ç–Ω—ã–π"])
        if prediction_type == "–ï–¥–∏–Ω–∏—á–Ω—ã–π":
            with st.form("single_prediction"):
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                    title = st.text_input("–ú–∞—Ä–∫–∞")
                    year = st.number_input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", min_value=1900, max_value=2023)
                    mileage = st.number_input("–ü—Ä–æ–±–µ–≥ (–∫–º)", min_value=0)
                    engine_capacity = st.number_input("–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)", min_value=0.0, step=0.1)
                    engine_power = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)", min_value=0)
                with col2:
                    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    transmission = st.selectbox("–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", ["–º–µ—Ö–∞–Ω–∏–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç", "—Ä–æ–±–æ—Ç", "–≤–∞—Ä–∏–∞—Ç–æ—Ä"])
                    body_type = st.selectbox("–¢–∏–ø –∫—É–∑–æ–≤–∞", [
                        "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 5 –¥–≤.", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 5 –¥–≤.", "—Å–µ–¥–∞–Ω", "–º–∏–Ω–∏–≤—ç–Ω",
                        "—Ö—ç—Ç—á–±–µ–∫ 5 –¥–≤.", "–∫—É–ø–µ", "–∫–∞–±—Ä–∏–æ–ª–µ—Ç", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 3 –¥–≤.",
                        "—Ö—ç—Ç—á–±–µ–∫ 3 –¥–≤.", "–ø–∏–∫–∞–ø –¥–≤–æ–π–Ω–∞—è –∫–∞–±–∏–Ω–∞", "—Å–µ–¥–∞–Ω-—Ö–∞—Ä–¥—Ç–æ–ø", "—Ç–∞—Ä–≥–∞",
                        "–∫–æ–º–ø–∞–∫—Ç–≤—ç–Ω", "–ª–∏—Ñ—Ç–±–µ–∫", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π", "—Ä–æ–¥—Å—Ç–µ—Ä",
                        "–∫—É–ø–µ-—Ö–∞—Ä–¥—Ç–æ–ø", "—Ñ—É—Ä–≥–æ–Ω", "–ø–∏–∫–∞–ø –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞", "–º–∏–∫—Ä–æ–≤—ç–Ω",
                        "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 3 –¥–≤.", "—Å–µ–¥–∞–Ω 2 –¥–≤.", "–ø–∏–∫–∞–ø –ø–æ–ª—É—Ç–æ—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞",
                        "—Å–ø–∏–¥—Å—Ç–µ—Ä", "–ª–∏–º—É–∑–∏–Ω", "—Ö—ç—Ç—á–±–µ–∫ 4 –¥–≤.", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª", "—Ñ–∞—Å—Ç–±–µ–∫"
                    ])
                    drive_type = st.selectbox("–ü—Ä–∏–≤–æ–¥", ["–ø–µ—Ä–µ–¥–Ω–∏–π", "–ø–æ–ª–Ω—ã–π", "–∑–∞–¥–Ω–∏–π"])
                    color = st.text_input("–¶–≤–µ—Ç")
                    fuel_type = st.selectbox("–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ"])
                    travel_distance = 0
                    if fuel_type == "–≠–ª–µ–∫—Ç—Ä–æ":
                        travel_distance = st.number_input("–î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ (–∫–º)", min_value=0)
                if st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å"):
                    error = False
                    if fuel_type == "–≠–ª–µ–∫—Ç—Ä–æ" and travel_distance <= 0:
                        st.error("–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —É–∫–∞–∂–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞")
                        error = True
                    if not error:
                        data = {
                            "title": title,
                            "year": year,
                            "mileage": mileage,
                            "transmission": transmission,
                            "body_type": body_type,
                            "drive_type": drive_type,
                            "color": color,
                            "engine_capacity": engine_capacity,
                            "engine_power": engine_power,
                            "fuel_type": fuel_type,
                            "travel_distance": travel_distance
                        }
                        try:
                            response = requests.post(
                                f"{BASE_API_URL}/predict-one",
                                json=data
                            )
                            if response.status_code == 200:
                                prediction = response.json()['prediction']
                                st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction:,.2f} —Ä—É–±.")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {response.text}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        else:
            uploaded_file = st.file_uploader("CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type="csv")
            if uploaded_file:
                try:
                    response = requests.post(
                        f"{BASE_API_URL}/predict-multiple",
                        files={"file": uploaded_file.getvalue()}
                    )
                    if response.status_code == 200:
                        predictions = response.json()["predictions"]
                        df = pd.read_csv(uploaded_file)
                        df["–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã"] = predictions
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                        st.dataframe(df.style.format({"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": "{:,.2f}"}))
                        
                        csv = df.to_csv(index=False).encode()
                        st.download_button(
                            "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                            csv,
                            "predictions.csv",
                            "text/csv"
                        )
                    else:
                        st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()