"""
Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
–í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ.
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º API –±—ç–∫–µ–Ω–¥–∞.
"""

from typing import Optional
import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
BASE_API_URL = "http://localhost:8000"
st.set_page_config(
    page_title="Car Price Prediction",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_data_from_api() -> Optional[pd.DataFrame]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame."""
    try:
        response = requests.get(f"{BASE_API_URL}/get_dataset", timeout=10)
        response.raise_for_status()
        return pd.DataFrame(response.json())
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def show_data_analysis(df: pd.DataFrame) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        st.dataframe(df.head())

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
    try:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.histplot(
                df['price'],
                bins=30,
                kde=True,
                ax=ax,
                binrange=(0, 10_000_000))
            ax.set_xlim(0, 10_000_000)
            ax.set_xticks(range(0, 11_000_000, 1_000_000))
            ax.set_xticklabels([f"{x//1_000_000}M" for x in ax.get_xticks()])
            st.pyplot(fig)

        with col2:
            st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            numeric_cols = ['year', 'mileage', 'engine_capacity',
                            'engine_power', 'travel_distance', 'price']
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.heatmap(df[numeric_cols].corr(), annot=True, ax=ax)
            st.pyplot(fig)
    except KeyError as e:
        st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

    try:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        categorical_cols = ['transmission', 'body_type',
                           'drive_type', 'color', 'fuel_type']
        categorical = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫", categorical_cols)
        fig, ax = plt.subplots(figsize=(10, 4))
        df[categorical].value_counts().plot(kind='bar', ax=ax)
        st.pyplot(fig)
    except KeyError as e:
        st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {str(e)}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {str(e)}")

def show_model_management() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏."""
    st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")
    
    try:
        response = requests.get(f"{BASE_API_URL}/models", timeout=10)
        response.raise_for_status()
        models = response.json()
        
        active_model = next((m for m in models if m['is_active']), None)
        if active_model:
            st.success(f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active_model['id']}")
            
        for model in models:
            with st.expander(f"{model['model_type']} ({model['id']})"):
                cols = st.columns([1, 3])
                with cols[0]:
                    if st.button(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {model['id']}"):
                        response = requests.post(
                            f"{BASE_API_URL}/set?unique_model_id={model['id']}"
                        )
                        if response.status_code == 200:
                            st.rerun()
                    st.metric("R¬≤", model['metrics']['r2_score'] or "N/A")
                    st.metric("MSE", model['metrics']['mse'] or "N/A")
                with cols[1]:
                    st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                    st.json(model['hyperparameters'])
                    st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                    st.json(model['metrics'])
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")

def show_model_training() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    st.title("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    model_type = st.selectbox(
        "–¢–∏–ø –º–æ–¥–µ–ª–∏",
        ["LinearRegression", "Ridge", "Lasso"]
    )
    
    with st.form("model_params"):
        model_name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
            help="–£–∫–∞–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏",
            max_chars=30
        )
        
        params = {}
        if model_type == "LinearRegression":
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['n_jobs'] = st.number_input("n_jobs", value=-1)
            params['copy_X'] = st.checkbox("copy_X", True)
        elif model_type == "Ridge":
            params['alpha'] = st.number_input("alpha", 1.0)
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['solver'] = st.selectbox(
                "solver",
                ["auto", "svd", "cholesky", "lsqr", "sag"]
            )
            params['tol'] = st.number_input("tol", 0.0001)
        elif model_type == "Lasso":
            params['alpha'] = st.number_input("alpha", 1.0)
            params['fit_intercept'] = st.checkbox("fit_intercept", True)
            params['selection'] = st.selectbox("selection", ["cyclic", "random"])
            params['tol'] = st.number_input("tol", 0.0001)
        
        if st.form_submit_button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"):
            if not model_name.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            else:
                try:
                    endpoint = {
                        "LinearRegression": "/fit_linearregression",
                        "Ridge": "/fit_ridge",
                        "Lasso": "/fit_lasso"
                    }[model_type]
                    
                    response = requests.post(
                        f"{BASE_API_URL}{endpoint}",
                        json={"params": params, "model_id_param": model_name.strip()},
                        timeout=30
                    )
                    response.raise_for_status()
                    st.success(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏–µ!")
                except requests.exceptions.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")

def show_prediction() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è."""
    st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")
    prediction_type = st.radio("–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞", ["–ï–¥–∏–Ω–∏—á–Ω—ã–π", "–ü–∞–∫–µ—Ç–Ω—ã–π"])
    
    if prediction_type == "–ï–¥–∏–Ω–∏—á–Ω—ã–π":
        with st.form("single_prediction"):
            col1, col2 = st.columns(2)
            data = {}
            with col1:
                st.subheader("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                data["title"] = st.text_input("–ú–∞—Ä–∫–∞")
                data["year"] = st.number_input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", 1900, 2023)
                data["mileage"] = st.number_input("–ü—Ä–æ–±–µ–≥ (–∫–º)", 0)
                data["engine_volume"] = st.number_input("–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)", 0.0, step=0.1)
                data["engine_horsepower"] = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)", 0)
            
            with col2:
                st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                data["transmission"] = st.selectbox(
                    "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á", 
                    ["–º–µ—Ö–∞–Ω–∏–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç", "—Ä–æ–±–æ—Ç", "–≤–∞—Ä–∏–∞—Ç–æ—Ä"]
                )
                data["body_type"] = st.selectbox("–¢–∏–ø –∫—É–∑–æ–≤–∞", [
                    "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 5 –¥–≤.", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 5 –¥–≤.", "—Å–µ–¥–∞–Ω", "–º–∏–Ω–∏–≤—ç–Ω",
                    "—Ö—ç—Ç—á–±–µ–∫ 5 –¥–≤.", "–∫—É–ø–µ", "–∫–∞–±—Ä–∏–æ–ª–µ—Ç", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 3 –¥–≤.",
                    "—Ö—ç—Ç—á–±–µ–∫ 3 –¥–≤.", "–ø–∏–∫–∞–ø –¥–≤–æ–π–Ω–∞—è –∫–∞–±–∏–Ω–∞", "—Å–µ–¥–∞–Ω-—Ö–∞—Ä–¥—Ç–æ–ø", "—Ç–∞—Ä–≥–∞",
                    "–∫–æ–º–ø–∞–∫—Ç–≤—ç–Ω", "–ª–∏—Ñ—Ç–±–µ–∫", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã–π", "—Ä–æ–¥—Å—Ç–µ—Ä",
                    "–∫—É–ø–µ-—Ö–∞—Ä–¥—Ç–æ–ø", "—Ñ—É—Ä–≥–æ–Ω", "–ø–∏–∫–∞–ø –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞", "–º–∏–∫—Ä–æ–≤—ç–Ω",
                    "—É–Ω–∏–≤–µ—Ä—Å–∞–ª 3 –¥–≤.", "—Å–µ–¥–∞–Ω 2 –¥–≤.", "–ø–∏–∫–∞–ø –ø–æ–ª—É—Ç–æ—Ä–Ω–∞—è –∫–∞–±–∏–Ω–∞",
                    "—Å–ø–∏–¥—Å—Ç–µ—Ä", "–ª–∏–º—É–∑–∏–Ω", "—Ö—ç—Ç—á–±–µ–∫ 4 –¥–≤.", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª", "—Ñ–∞—Å—Ç–±–µ–∫"
                ])
                data["drive_type"] = st.selectbox("–ü—Ä–∏–≤–æ–¥", ["–ø–µ—Ä–µ–¥–Ω–∏–π", "–ø–æ–ª–Ω—ã–π", "–∑–∞–¥–Ω–∏–π"])
                data["color"] = st.text_input("–¶–≤–µ—Ç")
                data["fuel_type"] = st.selectbox(
                    "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", 
                    ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ"]
                )
                data["travel_distance"] = 0
                if data["fuel_type"] == "–≠–ª–µ–∫—Ç—Ä–æ":
                    data["travel_distance"] = st.number_input("–î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ (–∫–º)", 0)
            
            if st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å"):
                if data["fuel_type"] == "–≠–ª–µ–∫—Ç—Ä–æ" and data["travel_distance"] <= 0:
                    st.error("–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —É–∫–∞–∂–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞")
                else:
                    try:
                        response = requests.post(
                            f"{BASE_API_URL}/predict-one",
                            json=data,
                            timeout=10
                        )
                        response.raise_for_status()
                        prediction = response.json()['prediction']
                        st.success(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction:,.2f} —Ä—É–±.")
                    except requests.exceptions.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    else:
        uploaded_file = st.file_uploader("CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type="csv")
        if uploaded_file:
            try:
                response = requests.post(
                    f"{BASE_API_URL}/predict-multiple",
                    files={"file": uploaded_file.getvalue()},
                    timeout=30
                )
                response.raise_for_status()
                
                predictions = response.json()["predictions"]
                df = pd.read_csv(uploaded_file)
                df["–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã"] = predictions
                
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                st.dataframe(df.style.format({"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã": "{:,.2f}"}))
                
                csv = df.to_csv(index=False).encode()
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    csv,
                    "predictions.csv",
                    "text/csv"
                )
            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", [
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", 
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏",
        "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", 
        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ])

    if page == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
        df = load_data_from_api()
        if df is not None:
            show_data_analysis(df)
    
    elif page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏":
        show_model_management()
    
    elif page == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
        show_model_training()
    
    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
        show_prediction()

if __name__ == "__main__":
    main()